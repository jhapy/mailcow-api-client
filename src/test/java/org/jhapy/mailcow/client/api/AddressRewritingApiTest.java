/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.api;

import org.jhapy.mailcow.client.model.AddBccBody;
import org.jhapy.mailcow.client.model.AddRecipientMapBody;
import org.jhapy.mailcow.client.model.DeleteBccBody;
import org.jhapy.mailcow.client.model.DeleteRecipientMapBody;
import org.jhapy.mailcow.client.model.InlineResponse200;
import org.jhapy.mailcow.client.model.InlineResponse401;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddressRewritingApi
 */
@Ignore
public class AddressRewritingApiTest {

    private final AddressRewritingApi api = new AddressRewritingApi();

    /**
     * Create BCC Map
     *
     * Using this endpoint you can create a BCC map to forward all mails via a bcc for a given domain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBCCMapTest() {
        AddBccBody body = null;
        InlineResponse200 response = api.createBCCMap(body);

        // TODO: test validations
    }
    /**
     * Create Recipient Map
     *
     * Using this endpoint you can create a recipient map to forward all mails from one email address to another.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRecipientMapTest() {
        AddRecipientMapBody body = null;
        InlineResponse200 response = api.createRecipientMap(body);

        // TODO: test validations
    }
    /**
     * Delete BCC Map
     *
     * Using this endpoint you can delete a BCC map, for this you have to know its ID. You can get the ID using the GET method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBCCMapTest() {
        DeleteBccBody body = null;
        InlineResponse200 response = api.deleteBCCMap(body);

        // TODO: test validations
    }
    /**
     * Delete Recipient Map
     *
     * Using this endpoint you can delete a recipient map, for this you have to know its ID. You can get the ID using the GET method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecipientMapTest() {
        DeleteRecipientMapBody body = null;
        InlineResponse200 response = api.deleteRecipientMap(body);

        // TODO: test validations
    }
    /**
     * Get BCC Map
     *
     * Using this endpoint you can get all BCC maps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBCCMapTest() {
        String id = null;
        String xAPIKey = null;
        api.getBCCMap(id, xAPIKey);

        // TODO: test validations
    }
    /**
     * Get Recipient Map
     *
     * Using this endpoint you can get all recipient maps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipientMapTest() {
        String id = null;
        String xAPIKey = null;
        api.getRecipientMap(id, xAPIKey);

        // TODO: test validations
    }
}
