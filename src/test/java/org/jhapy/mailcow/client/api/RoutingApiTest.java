/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.api;

import org.jhapy.mailcow.client.model.AddRelayhostBody;
import org.jhapy.mailcow.client.model.DeleteRelayhostBody;
import org.jhapy.mailcow.client.model.DeleteTransportBody;
import org.jhapy.mailcow.client.model.InlineResponse200;
import org.jhapy.mailcow.client.model.InlineResponse401;
import org.jhapy.mailcow.client.model.TransportAllBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoutingApi
 */
@Ignore
public class RoutingApiTest {

    private final RoutingApi api = new RoutingApi();

    /**
     * Create Sender-Dependent Transports
     *
     * Using this endpoint you can create Sender-Dependent Transports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSenderDependentTransportsTest() {
        AddRelayhostBody body = null;
        InlineResponse200 response = api.createSenderDependentTransports(body);

        // TODO: test validations
    }
    /**
     * Create Transport Maps
     *
     * Using this endpoint you can create Sender-Dependent Transports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransportMapsTest() {
        TransportAllBody body = null;
        InlineResponse200 response = api.createTransportMaps(body);

        // TODO: test validations
    }
    /**
     * Delete Sender-Dependent Transports
     *
     * Using this endpoint you can delete a Sender-Dependent Transport, for this you have to know its ID. You can get the ID using the GET method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSenderDependentTransportsTest() {
        DeleteRelayhostBody body = null;
        InlineResponse200 response = api.deleteSenderDependentTransports(body);

        // TODO: test validations
    }
    /**
     * Delete Transport Maps
     *
     * Using this endpoint you can delete a Transport Maps, for this you have to know its ID. You can get the ID using the GET method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransportMapsTest() {
        DeleteTransportBody body = null;
        InlineResponse200 response = api.deleteTransportMaps(body);

        // TODO: test validations
    }
    /**
     * Get Sender-Dependent Transports
     *
     * Using this endpoint you can get all Sender-Dependent Transports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderDependentTransportsTest() {
        String id = null;
        String xAPIKey = null;
        api.getSenderDependentTransports(id, xAPIKey);

        // TODO: test validations
    }
    /**
     * Get Transport Maps
     *
     * Using this endpoint you can get all Transport Maps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransportMapsTest() {
        String id = null;
        String xAPIKey = null;
        api.getTransportMaps(id, xAPIKey);

        // TODO: test validations
    }
}
