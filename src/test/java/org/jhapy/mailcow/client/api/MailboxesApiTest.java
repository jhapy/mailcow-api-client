/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.api;

import org.jhapy.mailcow.client.model.AddMailboxBody;
import org.jhapy.mailcow.client.model.DefaultMethodResponse;
import org.jhapy.mailcow.client.model.DeleteMailboxBody;
import org.jhapy.mailcow.client.model.EditMailboxBody;
import org.jhapy.mailcow.client.model.EditPushoverBody;
import org.jhapy.mailcow.client.model.EditQuarantineNotificationBody;
import org.jhapy.mailcow.client.model.EditUseraclBody;
import org.jhapy.mailcow.client.model.InlineResponse200;
import org.jhapy.mailcow.client.model.InlineResponse401;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MailboxesApi
 */
@Ignore
public class MailboxesApiTest {

    private final MailboxesApi api = new MailboxesApi();

    /**
     * Create mailbox
     *
     * You may create your own mailbox using this action. It takes a JSON object containing a domain informations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMailboxTest() {
        AddMailboxBody body = null;
        List<DefaultMethodResponse> response = api.createMailbox(body);

        // TODO: test validations
    }
    /**
     * Delete mailbox
     *
     * You can delete one or more mailboxes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMailboxTest() {
        DeleteMailboxBody body = null;
        InlineResponse200 response = api.deleteMailbox(body);

        // TODO: test validations
    }
    /**
     * Edit mailbox spam filter score
     *
     * Using this endpoint you can edit the spam filter score for a certain mailbox.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editMailboxSpamFilterScoreTest() {
        Object body = null;
        InlineResponse200 response = api.editMailboxSpamFilterScore(body);

        // TODO: test validations
    }
    /**
     * Get mailboxes
     *
     * You can list all mailboxes existing in system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailboxesTest() {
        String id = null;
        String xAPIKey = null;
        Object response = api.getMailboxes(id, xAPIKey);

        // TODO: test validations
    }
    /**
     * Quarantine Notifications
     *
     * You can update one or more mailboxes per request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quarantineNotificationsTest() {
        EditQuarantineNotificationBody body = null;
        api.quarantineNotifications(body);

        // TODO: test validations
    }
    /**
     * Update mailbox
     *
     * You can update one or more mailboxes per request. You can also send just attributes you want to change
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMailboxTest() {
        EditMailboxBody body = null;
        InlineResponse200 response = api.updateMailbox(body);

        // TODO: test validations
    }
    /**
     * Update mailbox ACL
     *
     * Using this endpoints its possible to update the ACL&#x27;s for mailboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMailboxACLTest() {
        EditUseraclBody body = null;
        InlineResponse200 response = api.updateMailboxACL(body);

        // TODO: test validations
    }
    /**
     * Update Pushover settings
     *
     * Using this endpoint it is possible to update the pushover settings for mailboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePushoverSettingsTest() {
        EditPushoverBody body = null;
        InlineResponse200 response = api.updatePushoverSettings(body);

        // TODO: test validations
    }
}
