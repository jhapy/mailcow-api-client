/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * AddRecipientMapBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class AddRecipientMapBody {
  @JsonProperty("active")
  private BigDecimal active = null;

  @JsonProperty("recipient_map_new")
  private String recipientMapNew = null;

  @JsonProperty("recipient_map_old")
  private String recipientMapOld = null;

  public AddRecipientMapBody active(BigDecimal active) {
    this.active = active;
    return this;
  }

   /**
   * 1 for a active user account 0 for a disabled user account
   * @return active
  **/
  @Schema(description = "1 for a active user account 0 for a disabled user account")
  public BigDecimal getActive() {
    return active;
  }

  public void setActive(BigDecimal active) {
    this.active = active;
  }

  public AddRecipientMapBody recipientMapNew(String recipientMapNew) {
    this.recipientMapNew = recipientMapNew;
    return this;
  }

   /**
   * the email address that should receive the forwarded emails
   * @return recipientMapNew
  **/
  @Schema(description = "the email address that should receive the forwarded emails")
  public String getRecipientMapNew() {
    return recipientMapNew;
  }

  public void setRecipientMapNew(String recipientMapNew) {
    this.recipientMapNew = recipientMapNew;
  }

  public AddRecipientMapBody recipientMapOld(String recipientMapOld) {
    this.recipientMapOld = recipientMapOld;
    return this;
  }

   /**
   * the email address which emails should be forwarded
   * @return recipientMapOld
  **/
  @Schema(description = "the email address which emails should be forwarded")
  public String getRecipientMapOld() {
    return recipientMapOld;
  }

  public void setRecipientMapOld(String recipientMapOld) {
    this.recipientMapOld = recipientMapOld;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddRecipientMapBody addRecipientMapBody = (AddRecipientMapBody) o;
    return Objects.equals(this.active, addRecipientMapBody.active) &&
        Objects.equals(this.recipientMapNew, addRecipientMapBody.recipientMapNew) &&
        Objects.equals(this.recipientMapOld, addRecipientMapBody.recipientMapOld);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, recipientMapNew, recipientMapOld);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddRecipientMapBody {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    recipientMapNew: ").append(toIndentedString(recipientMapNew)).append("\n");
    sb.append("    recipientMapOld: ").append(toIndentedString(recipientMapOld)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
