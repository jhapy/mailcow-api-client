/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * TransportAllBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class TransportAllBody {
  @JsonProperty("active")
  private BigDecimal active = null;

  @JsonProperty("destination")
  private String destination = null;

  @JsonProperty("nexthop")
  private String nexthop = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("username")
  private String username = null;

  public TransportAllBody active(BigDecimal active) {
    this.active = active;
    return this;
  }

   /**
   * 1 for a active transport map 0 for a disabled transport map
   * @return active
  **/
  @Schema(description = "1 for a active transport map 0 for a disabled transport map")
  public BigDecimal getActive() {
    return active;
  }

  public void setActive(BigDecimal active) {
    this.active = active;
  }

  public TransportAllBody destination(String destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @Schema(description = "")
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }

  public TransportAllBody nexthop(String nexthop) {
    this.nexthop = nexthop;
    return this;
  }

   /**
   * Get nexthop
   * @return nexthop
  **/
  @Schema(description = "")
  public String getNexthop() {
    return nexthop;
  }

  public void setNexthop(String nexthop) {
    this.nexthop = nexthop;
  }

  public TransportAllBody password(String password) {
    this.password = password;
    return this;
  }

   /**
   * the password for the smtp user
   * @return password
  **/
  @Schema(description = "the password for the smtp user")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public TransportAllBody username(String username) {
    this.username = username;
    return this;
  }

   /**
   * the username used to authenticate
   * @return username
  **/
  @Schema(description = "the username used to authenticate")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportAllBody transportAllBody = (TransportAllBody) o;
    return Objects.equals(this.active, transportAllBody.active) &&
        Objects.equals(this.destination, transportAllBody.destination) &&
        Objects.equals(this.nexthop, transportAllBody.nexthop) &&
        Objects.equals(this.password, transportAllBody.password) &&
        Objects.equals(this.username, transportAllBody.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, destination, nexthop, password, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportAllBody {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    nexthop: ").append(toIndentedString(nexthop)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
