/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * AddDkimBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class AddDkimBody {
  @JsonProperty("dkim_selector")
  private String dkimSelector = null;

  @JsonProperty("domains")
  private String domains = null;

  @JsonProperty("key_size")
  private BigDecimal keySize = null;

  public AddDkimBody dkimSelector(String dkimSelector) {
    this.dkimSelector = dkimSelector;
    return this;
  }

   /**
   * the DKIM selector default dkim
   * @return dkimSelector
  **/
  @Schema(description = "the DKIM selector default dkim")
  public String getDkimSelector() {
    return dkimSelector;
  }

  public void setDkimSelector(String dkimSelector) {
    this.dkimSelector = dkimSelector;
  }

  public AddDkimBody domains(String domains) {
    this.domains = domains;
    return this;
  }

   /**
   * a list of domains for which a dkim key should be generated
   * @return domains
  **/
  @Schema(description = "a list of domains for which a dkim key should be generated")
  public String getDomains() {
    return domains;
  }

  public void setDomains(String domains) {
    this.domains = domains;
  }

  public AddDkimBody keySize(BigDecimal keySize) {
    this.keySize = keySize;
    return this;
  }

   /**
   * the key size (1024 or 2048)
   * @return keySize
  **/
  @Schema(description = "the key size (1024 or 2048)")
  public BigDecimal getKeySize() {
    return keySize;
  }

  public void setKeySize(BigDecimal keySize) {
    this.keySize = keySize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddDkimBody addDkimBody = (AddDkimBody) o;
    return Objects.equals(this.dkimSelector, addDkimBody.dkimSelector) &&
        Objects.equals(this.domains, addDkimBody.domains) &&
        Objects.equals(this.keySize, addDkimBody.keySize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dkimSelector, domains, keySize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddDkimBody {\n");
    
    sb.append("    dkimSelector: ").append(toIndentedString(dkimSelector)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    keySize: ").append(toIndentedString(keySize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
