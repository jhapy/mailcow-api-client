/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * AddDomainadminBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class AddDomainadminBody {
  @JsonProperty("active")
  private BigDecimal active = null;

  @JsonProperty("domains")
  private String domains = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("password2")
  private String password2 = null;

  @JsonProperty("username")
  private String username = null;

  public AddDomainadminBody active(BigDecimal active) {
    this.active = active;
    return this;
  }

   /**
   * 1 for a active user account 0 for a disabled user account
   * @return active
  **/
  @Schema(description = "1 for a active user account 0 for a disabled user account")
  public BigDecimal getActive() {
    return active;
  }

  public void setActive(BigDecimal active) {
    this.active = active;
  }

  public AddDomainadminBody domains(String domains) {
    this.domains = domains;
    return this;
  }

   /**
   * the domains the user should be a admin of
   * @return domains
  **/
  @Schema(description = "the domains the user should be a admin of")
  public String getDomains() {
    return domains;
  }

  public void setDomains(String domains) {
    this.domains = domains;
  }

  public AddDomainadminBody password(String password) {
    this.password = password;
    return this;
  }

   /**
   * domain admin user password
   * @return password
  **/
  @Schema(description = "domain admin user password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public AddDomainadminBody password2(String password2) {
    this.password2 = password2;
    return this;
  }

   /**
   * domain admin user password
   * @return password2
  **/
  @Schema(description = "domain admin user password")
  public String getPassword2() {
    return password2;
  }

  public void setPassword2(String password2) {
    this.password2 = password2;
  }

  public AddDomainadminBody username(String username) {
    this.username = username;
    return this;
  }

   /**
   * the username for the admin user
   * @return username
  **/
  @Schema(description = "the username for the admin user")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddDomainadminBody addDomainadminBody = (AddDomainadminBody) o;
    return Objects.equals(this.active, addDomainadminBody.active) &&
        Objects.equals(this.domains, addDomainadminBody.domains) &&
        Objects.equals(this.password, addDomainadminBody.password) &&
        Objects.equals(this.password2, addDomainadminBody.password2) &&
        Objects.equals(this.username, addDomainadminBody.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, domains, password, password2, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddDomainadminBody {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    password2: ").append(toIndentedString(password2)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
