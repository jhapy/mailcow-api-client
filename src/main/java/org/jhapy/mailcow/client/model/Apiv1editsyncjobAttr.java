/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * Apiv1editsyncjobAttr
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class Apiv1editsyncjobAttr {
  @JsonProperty("active")
  private Boolean active = null;

  @JsonProperty("automap")
  private Boolean automap = null;

  @JsonProperty("custom_params")
  private String customParams = null;

  @JsonProperty("delete1")
  private Boolean delete1 = null;

  @JsonProperty("delete2")
  private Boolean delete2 = null;

  @JsonProperty("delete2duplicates")
  private Boolean delete2duplicates = null;

  /**
   * Encryption
   */
  public enum Enc1Enum {
    TLS("TLS"),
    SSL("SSL"),
    PLAIN("PLAIN");

    private String value;

    Enc1Enum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static Enc1Enum fromValue(String text) {
      for (Enc1Enum b : Enc1Enum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("enc1")
  private Enc1Enum enc1 = null;

  @JsonProperty("exclude")
  private String exclude = null;

  @JsonProperty("host1")
  private String host1 = null;

  @JsonProperty("maxage")
  private BigDecimal maxage = null;

  @JsonProperty("maxbytespersecond")
  private BigDecimal maxbytespersecond = null;

  @JsonProperty("mins_interval")
  private BigDecimal minsInterval = null;

  @JsonProperty("password1")
  private String password1 = null;

  @JsonProperty("port1")
  private String port1 = null;

  @JsonProperty("skipcrossduplicates")
  private Boolean skipcrossduplicates = null;

  @JsonProperty("subfolder2")
  private String subfolder2 = null;

  @JsonProperty("subscribeall")
  private Boolean subscribeall = null;

  @JsonProperty("timeout1")
  private BigDecimal timeout1 = null;

  @JsonProperty("timeout2")
  private BigDecimal timeout2 = null;

  @JsonProperty("user1")
  private String user1 = null;

  public Apiv1editsyncjobAttr active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Is sync job active
   * @return active
  **/
  @Schema(description = "Is sync job active")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Apiv1editsyncjobAttr automap(Boolean automap) {
    this.automap = automap;
    return this;
  }

   /**
   * Try to automap folders (\&quot;Sent items\&quot;, \&quot;Sent\&quot; &#x3D;&gt; \&quot;Sent\&quot; etc.)
   * @return automap
  **/
  @Schema(description = "Try to automap folders (\"Sent items\", \"Sent\" => \"Sent\" etc.)")
  public Boolean isAutomap() {
    return automap;
  }

  public void setAutomap(Boolean automap) {
    this.automap = automap;
  }

  public Apiv1editsyncjobAttr customParams(String customParams) {
    this.customParams = customParams;
    return this;
  }

   /**
   * Custom parameters passed to imapsync command
   * @return customParams
  **/
  @Schema(description = "Custom parameters passed to imapsync command")
  public String getCustomParams() {
    return customParams;
  }

  public void setCustomParams(String customParams) {
    this.customParams = customParams;
  }

  public Apiv1editsyncjobAttr delete1(Boolean delete1) {
    this.delete1 = delete1;
    return this;
  }

   /**
   * Delete from source when completed
   * @return delete1
  **/
  @Schema(description = "Delete from source when completed")
  public Boolean isDelete1() {
    return delete1;
  }

  public void setDelete1(Boolean delete1) {
    this.delete1 = delete1;
  }

  public Apiv1editsyncjobAttr delete2(Boolean delete2) {
    this.delete2 = delete2;
    return this;
  }

   /**
   * Delete messages on destination that are not on source
   * @return delete2
  **/
  @Schema(description = "Delete messages on destination that are not on source")
  public Boolean isDelete2() {
    return delete2;
  }

  public void setDelete2(Boolean delete2) {
    this.delete2 = delete2;
  }

  public Apiv1editsyncjobAttr delete2duplicates(Boolean delete2duplicates) {
    this.delete2duplicates = delete2duplicates;
    return this;
  }

   /**
   * Delete duplicates on destination
   * @return delete2duplicates
  **/
  @Schema(description = "Delete duplicates on destination")
  public Boolean isDelete2duplicates() {
    return delete2duplicates;
  }

  public void setDelete2duplicates(Boolean delete2duplicates) {
    this.delete2duplicates = delete2duplicates;
  }

  public Apiv1editsyncjobAttr enc1(Enc1Enum enc1) {
    this.enc1 = enc1;
    return this;
  }

   /**
   * Encryption
   * @return enc1
  **/
  @Schema(description = "Encryption")
  public Enc1Enum getEnc1() {
    return enc1;
  }

  public void setEnc1(Enc1Enum enc1) {
    this.enc1 = enc1;
  }

  public Apiv1editsyncjobAttr exclude(String exclude) {
    this.exclude = exclude;
    return this;
  }

   /**
   * Exclude objects (regex)
   * @return exclude
  **/
  @Schema(description = "Exclude objects (regex)")
  public String getExclude() {
    return exclude;
  }

  public void setExclude(String exclude) {
    this.exclude = exclude;
  }

  public Apiv1editsyncjobAttr host1(String host1) {
    this.host1 = host1;
    return this;
  }

   /**
   * Hostname
   * @return host1
  **/
  @Schema(description = "Hostname")
  public String getHost1() {
    return host1;
  }

  public void setHost1(String host1) {
    this.host1 = host1;
  }

  public Apiv1editsyncjobAttr maxage(BigDecimal maxage) {
    this.maxage = maxage;
    return this;
  }

   /**
   * Maximum age of messages in days that will be polled from remote (0 &#x3D; ignore age)
   * @return maxage
  **/
  @Schema(description = "Maximum age of messages in days that will be polled from remote (0 = ignore age)")
  public BigDecimal getMaxage() {
    return maxage;
  }

  public void setMaxage(BigDecimal maxage) {
    this.maxage = maxage;
  }

  public Apiv1editsyncjobAttr maxbytespersecond(BigDecimal maxbytespersecond) {
    this.maxbytespersecond = maxbytespersecond;
    return this;
  }

   /**
   * Max. bytes per second (0 &#x3D; unlimited)
   * @return maxbytespersecond
  **/
  @Schema(description = "Max. bytes per second (0 = unlimited)")
  public BigDecimal getMaxbytespersecond() {
    return maxbytespersecond;
  }

  public void setMaxbytespersecond(BigDecimal maxbytespersecond) {
    this.maxbytespersecond = maxbytespersecond;
  }

  public Apiv1editsyncjobAttr minsInterval(BigDecimal minsInterval) {
    this.minsInterval = minsInterval;
    return this;
  }

   /**
   * Interval (min)
   * @return minsInterval
  **/
  @Schema(description = "Interval (min)")
  public BigDecimal getMinsInterval() {
    return minsInterval;
  }

  public void setMinsInterval(BigDecimal minsInterval) {
    this.minsInterval = minsInterval;
  }

  public Apiv1editsyncjobAttr password1(String password1) {
    this.password1 = password1;
    return this;
  }

   /**
   * Password
   * @return password1
  **/
  @Schema(description = "Password")
  public String getPassword1() {
    return password1;
  }

  public void setPassword1(String password1) {
    this.password1 = password1;
  }

  public Apiv1editsyncjobAttr port1(String port1) {
    this.port1 = port1;
    return this;
  }

   /**
   * Port
   * @return port1
  **/
  @Schema(description = "Port")
  public String getPort1() {
    return port1;
  }

  public void setPort1(String port1) {
    this.port1 = port1;
  }

  public Apiv1editsyncjobAttr skipcrossduplicates(Boolean skipcrossduplicates) {
    this.skipcrossduplicates = skipcrossduplicates;
    return this;
  }

   /**
   * Skip duplicate messages across folders (first come, first serve)
   * @return skipcrossduplicates
  **/
  @Schema(description = "Skip duplicate messages across folders (first come, first serve)")
  public Boolean isSkipcrossduplicates() {
    return skipcrossduplicates;
  }

  public void setSkipcrossduplicates(Boolean skipcrossduplicates) {
    this.skipcrossduplicates = skipcrossduplicates;
  }

  public Apiv1editsyncjobAttr subfolder2(String subfolder2) {
    this.subfolder2 = subfolder2;
    return this;
  }

   /**
   * Sync into subfolder on destination (empty &#x3D; do not use subfolder)
   * @return subfolder2
  **/
  @Schema(description = "Sync into subfolder on destination (empty = do not use subfolder)")
  public String getSubfolder2() {
    return subfolder2;
  }

  public void setSubfolder2(String subfolder2) {
    this.subfolder2 = subfolder2;
  }

  public Apiv1editsyncjobAttr subscribeall(Boolean subscribeall) {
    this.subscribeall = subscribeall;
    return this;
  }

   /**
   * Subscribe all folders
   * @return subscribeall
  **/
  @Schema(description = "Subscribe all folders")
  public Boolean isSubscribeall() {
    return subscribeall;
  }

  public void setSubscribeall(Boolean subscribeall) {
    this.subscribeall = subscribeall;
  }

  public Apiv1editsyncjobAttr timeout1(BigDecimal timeout1) {
    this.timeout1 = timeout1;
    return this;
  }

   /**
   * Timeout for connection to remote host
   * @return timeout1
  **/
  @Schema(description = "Timeout for connection to remote host")
  public BigDecimal getTimeout1() {
    return timeout1;
  }

  public void setTimeout1(BigDecimal timeout1) {
    this.timeout1 = timeout1;
  }

  public Apiv1editsyncjobAttr timeout2(BigDecimal timeout2) {
    this.timeout2 = timeout2;
    return this;
  }

   /**
   * Timeout for connection to local host
   * @return timeout2
  **/
  @Schema(description = "Timeout for connection to local host")
  public BigDecimal getTimeout2() {
    return timeout2;
  }

  public void setTimeout2(BigDecimal timeout2) {
    this.timeout2 = timeout2;
  }

  public Apiv1editsyncjobAttr user1(String user1) {
    this.user1 = user1;
    return this;
  }

   /**
   * Username
   * @return user1
  **/
  @Schema(description = "Username")
  public String getUser1() {
    return user1;
  }

  public void setUser1(String user1) {
    this.user1 = user1;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Apiv1editsyncjobAttr apiv1editsyncjobAttr = (Apiv1editsyncjobAttr) o;
    return Objects.equals(this.active, apiv1editsyncjobAttr.active) &&
        Objects.equals(this.automap, apiv1editsyncjobAttr.automap) &&
        Objects.equals(this.customParams, apiv1editsyncjobAttr.customParams) &&
        Objects.equals(this.delete1, apiv1editsyncjobAttr.delete1) &&
        Objects.equals(this.delete2, apiv1editsyncjobAttr.delete2) &&
        Objects.equals(this.delete2duplicates, apiv1editsyncjobAttr.delete2duplicates) &&
        Objects.equals(this.enc1, apiv1editsyncjobAttr.enc1) &&
        Objects.equals(this.exclude, apiv1editsyncjobAttr.exclude) &&
        Objects.equals(this.host1, apiv1editsyncjobAttr.host1) &&
        Objects.equals(this.maxage, apiv1editsyncjobAttr.maxage) &&
        Objects.equals(this.maxbytespersecond, apiv1editsyncjobAttr.maxbytespersecond) &&
        Objects.equals(this.minsInterval, apiv1editsyncjobAttr.minsInterval) &&
        Objects.equals(this.password1, apiv1editsyncjobAttr.password1) &&
        Objects.equals(this.port1, apiv1editsyncjobAttr.port1) &&
        Objects.equals(this.skipcrossduplicates, apiv1editsyncjobAttr.skipcrossduplicates) &&
        Objects.equals(this.subfolder2, apiv1editsyncjobAttr.subfolder2) &&
        Objects.equals(this.subscribeall, apiv1editsyncjobAttr.subscribeall) &&
        Objects.equals(this.timeout1, apiv1editsyncjobAttr.timeout1) &&
        Objects.equals(this.timeout2, apiv1editsyncjobAttr.timeout2) &&
        Objects.equals(this.user1, apiv1editsyncjobAttr.user1);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, automap, customParams, delete1, delete2, delete2duplicates, enc1, exclude, host1, maxage, maxbytespersecond, minsInterval, password1, port1, skipcrossduplicates, subfolder2, subscribeall, timeout1, timeout2, user1);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Apiv1editsyncjobAttr {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    automap: ").append(toIndentedString(automap)).append("\n");
    sb.append("    customParams: ").append(toIndentedString(customParams)).append("\n");
    sb.append("    delete1: ").append(toIndentedString(delete1)).append("\n");
    sb.append("    delete2: ").append(toIndentedString(delete2)).append("\n");
    sb.append("    delete2duplicates: ").append(toIndentedString(delete2duplicates)).append("\n");
    sb.append("    enc1: ").append(toIndentedString(enc1)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    host1: ").append(toIndentedString(host1)).append("\n");
    sb.append("    maxage: ").append(toIndentedString(maxage)).append("\n");
    sb.append("    maxbytespersecond: ").append(toIndentedString(maxbytespersecond)).append("\n");
    sb.append("    minsInterval: ").append(toIndentedString(minsInterval)).append("\n");
    sb.append("    password1: ").append(toIndentedString(password1)).append("\n");
    sb.append("    port1: ").append(toIndentedString(port1)).append("\n");
    sb.append("    skipcrossduplicates: ").append(toIndentedString(skipcrossduplicates)).append("\n");
    sb.append("    subfolder2: ").append(toIndentedString(subfolder2)).append("\n");
    sb.append("    subscribeall: ").append(toIndentedString(subscribeall)).append("\n");
    sb.append("    timeout1: ").append(toIndentedString(timeout1)).append("\n");
    sb.append("    timeout2: ").append(toIndentedString(timeout2)).append("\n");
    sb.append("    user1: ").append(toIndentedString(user1)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
