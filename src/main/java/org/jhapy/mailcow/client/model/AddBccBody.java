/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * AddBccBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class AddBccBody {
  @JsonProperty("active")
  private BigDecimal active = null;

  @JsonProperty("bcc_dest")
  private String bccDest = null;

  @JsonProperty("local_dest")
  private String localDest = null;

  @JsonProperty("type")
  private String type = null;

  public AddBccBody active(BigDecimal active) {
    this.active = active;
    return this;
  }

   /**
   * 1 for a active user account 0 for a disabled user account
   * @return active
  **/
  @Schema(description = "1 for a active user account 0 for a disabled user account")
  public BigDecimal getActive() {
    return active;
  }

  public void setActive(BigDecimal active) {
    this.active = active;
  }

  public AddBccBody bccDest(String bccDest) {
    this.bccDest = bccDest;
    return this;
  }

   /**
   * the email address where all mails should be send to
   * @return bccDest
  **/
  @Schema(description = "the email address where all mails should be send to")
  public String getBccDest() {
    return bccDest;
  }

  public void setBccDest(String bccDest) {
    this.bccDest = bccDest;
  }

  public AddBccBody localDest(String localDest) {
    this.localDest = localDest;
    return this;
  }

   /**
   * the domain which emails should be forwarded
   * @return localDest
  **/
  @Schema(description = "the domain which emails should be forwarded")
  public String getLocalDest() {
    return localDest;
  }

  public void setLocalDest(String localDest) {
    this.localDest = localDest;
  }

  public AddBccBody type(String type) {
    this.type = type;
    return this;
  }

   /**
   * the type of bcc map can be &#x60;sender&#x60; or &#x60;recipient&#x60;
   * @return type
  **/
  @Schema(description = "the type of bcc map can be `sender` or `recipient`")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddBccBody addBccBody = (AddBccBody) o;
    return Objects.equals(this.active, addBccBody.active) &&
        Objects.equals(this.bccDest, addBccBody.bccDest) &&
        Objects.equals(this.localDest, addBccBody.localDest) &&
        Objects.equals(this.type, addBccBody.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, bccDest, localDest, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddBccBody {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    bccDest: ").append(toIndentedString(bccDest)).append("\n");
    sb.append("    localDest: ").append(toIndentedString(localDest)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
