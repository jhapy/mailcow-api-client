/*
 * mailcow API
 * mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.  In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.  There are two types of API keys   - The read only key can only be used for all get endpoints   - The read write key can be used for all endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.jhapy.mailcow.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * AddApppasswdBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-23T22:25:19.320233+01:00[Africa/Casablanca]")
public class AddApppasswdBody {
  @JsonProperty("active")
  private Boolean active = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("app_name")
  private String appName = null;

  @JsonProperty("app_passwd")
  private String appPasswd = null;

  @JsonProperty("app_passwd2")
  private String appPasswd2 = null;

  public AddApppasswdBody active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * is alias active or not
   * @return active
  **/
  @Schema(description = "is alias active or not")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public AddApppasswdBody username(String username) {
    this.username = username;
    return this;
  }

   /**
   * mailbox for which the app password should be created
   * @return username
  **/
  @Schema(description = "mailbox for which the app password should be created")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public AddApppasswdBody appName(String appName) {
    this.appName = appName;
    return this;
  }

   /**
   * name of your app password
   * @return appName
  **/
  @Schema(description = "name of your app password")
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }

  public AddApppasswdBody appPasswd(String appPasswd) {
    this.appPasswd = appPasswd;
    return this;
  }

   /**
   * your app password
   * @return appPasswd
  **/
  @Schema(description = "your app password")
  public String getAppPasswd() {
    return appPasswd;
  }

  public void setAppPasswd(String appPasswd) {
    this.appPasswd = appPasswd;
  }

  public AddApppasswdBody appPasswd2(String appPasswd2) {
    this.appPasswd2 = appPasswd2;
    return this;
  }

   /**
   * your app password
   * @return appPasswd2
  **/
  @Schema(description = "your app password")
  public String getAppPasswd2() {
    return appPasswd2;
  }

  public void setAppPasswd2(String appPasswd2) {
    this.appPasswd2 = appPasswd2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApppasswdBody addApppasswdBody = (AddApppasswdBody) o;
    return Objects.equals(this.active, addApppasswdBody.active) &&
        Objects.equals(this.username, addApppasswdBody.username) &&
        Objects.equals(this.appName, addApppasswdBody.appName) &&
        Objects.equals(this.appPasswd, addApppasswdBody.appPasswd) &&
        Objects.equals(this.appPasswd2, addApppasswdBody.appPasswd2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, username, appName, appPasswd, appPasswd2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApppasswdBody {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appPasswd: ").append(toIndentedString(appPasswd)).append("\n");
    sb.append("    appPasswd2: ").append(toIndentedString(appPasswd2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
